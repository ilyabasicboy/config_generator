# Generated by Django 2.2.28 on 2022-10-03 09:49

import config_generator.configurator.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WhiteLabelConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('onboarding_subtitle_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='текст на стартовом экране онбординга под логотипом и названием клиента')),
                ('app_name', models.CharField(max_length=255, verbose_name='название приложения')),
                ('version', models.CharField(max_length=255, verbose_name='версия')),
                ('domain', models.CharField(blank=True, help_text='не xmpp хост, может не сопадать', max_length=255, null=True, verbose_name='основной домен приложения')),
                ('allow_registration', models.BooleanField(default=False, verbose_name='разрешать регистрацию')),
                ('locked_host', models.CharField(blank=True, help_text='если пустой -  доступны все из allowed_hosts', max_length=255, null=True, verbose_name='xmpp хост, который нельзя изменить,на котором происходит регистрацияи авторизация пользователя')),
                ('allowed_hosts', config_generator.configurator.fields.CustomArrayField(blank=True, help_text='Если пустой - доступны любые хосты. Значения разделить запятой.', null=True, verbose_name='доступные для регистрации и авторизации xmpp хосты')),
                ('supports_mulriaccounts', models.BooleanField(default=False, verbose_name='разрешать добавлять несколько аккаунтов')),
                ('required_touch_id_or_password', models.BooleanField(default=False, verbose_name='включить дополнительную защиту приложения пинкодом или отпечатком/лицом')),
                ('locked_conversation_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='принимать только чаты определенного типа')),
                ('avatar_masks', config_generator.configurator.fields.CustomArrayField(blank=True, help_text='Значения разделить запятой.', max_length=255, null=True, verbose_name='маски для аватаров')),
                ('locked_avatar_mask', models.CharField(blank=True, max_length=255, null=True, verbose_name='закрепленная маска для аватара')),
                ('support_calls', models.BooleanField(default=False, verbose_name='поддержка звонков')),
                ('support_groupchats', models.BooleanField(default=False, verbose_name='поддержка групповых чатов')),
                ('allow_conversations_from_all_hosts', models.BooleanField(default=False, verbose_name='разрешать диалоги с любыми хостами')),
                ('application_color', models.CharField(blank=True, help_text='в hexadecimal формате, #ffffff', max_length=255, null=True, verbose_name='основной цвет приложения')),
                ('launch_screen_color', models.CharField(blank=True, help_text='в hexadecimal формате, #ffffff', max_length=255, null=True, verbose_name='цвет стартового экрана')),
            ],
            options={
                'verbose_name': 'конфигурация клиента',
                'verbose_name_plural': 'конфигурации клиента',
            },
        ),
        migrations.CreateModel(
            name='WhiteLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='название приложения')),
                ('icons', models.FileField(blank=True, null=True, upload_to='upload/files', verbose_name='Распаковать архив с иконками')),
                ('masks', models.FileField(blank=True, null=True, upload_to='upload/files', verbose_name='Распаковать архив с масками')),
                ('api_key', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='Ключ авторизации')),
                ('config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='whitelabel', to='configurator.WhiteLabelConfig', verbose_name='Конфигурация')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'whitelabel',
                'verbose_name_plural': 'whitelabels',
            },
        ),
    ]
